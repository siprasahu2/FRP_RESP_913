#Fri Jan 13 12:06:06 IST 2023
[condition][]isCurrentDateLessThanOrEqualToDesiredDueDate{var0}=((new DateCheck()).isCurrentDateLessThanOrEqualToDesiredDueDate({var0}))
[condition][]it is not true that the {field} is less than {value}=(!((new Equals()).isLessThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the {field} is less than time {value}=(!((new TimeFormatCheck()).fieldinformatlessthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]this  fetchAbbreviationName{var0}=((new ThoroughFareHelperVZW()).fetchAbbreviationName({var0}))
[condition][]noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet{var0} {var1} {var2}=((new Occurence()).noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet({var0},{var1},{var2}))
[condition][]it is not true that the {field} has a invalid value {value}=(!((new isValidValue()).isNotValidValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} contains {num} of spaces before Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveSpacesBeforeAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]the maximum length of {field} is {value}=((new LengthCheck()).checkMaximumlength((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that any occurance of the {field} is not equal to values {coma_separated_values}=(!((new Occurence()).anyOccurenceNotEqualToValues((xcb.xpath({field})).stringValue(),{coma_separated_values})))
[condition][]the {field} doesnot contain single or combination of the values {CommaSeparatedValues}=((new Contains()).fielddoesntcontaincombination((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that the {field} is Numeric=(!((new DatatypeCheck()).checkNumeric((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the last character Of {field} is {value}=(!((new Equals()).virtualLastCharacterOfField((xcb.xpath({field})).stringValue(),{value})))
[condition][]the position of Numeric is {pos} in {field}=((new DatatypeCheck()).checkPositionNumeric({pos},(xcb.xpath({field})).stringValue()))
[condition][]the {pos} and {pos} position of the {field} is lesser than {pos} and {pos} position=((new Position()).twoPositionValueofTagIsLessThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]positionOfAnyFieldEqualToCharacter{var0} {var1} {var2}=((new Occurence()).positionOfAnyFieldEqualToCharacter({var0},{var1},{var2}))
[condition][]it is not true that the {field} is Prohibited for {comma_seperated_values}=(!((new Prohibited()).prohibitedForValues((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]it is not true that the {field} has format as {format}=(!((new SpecialFormat()).formatIs((xcb.xpath({field})).stringValue(),{format})))
[condition][]it is not true that the {field} has both uppercase and lowercase characters for commaseperated vaules=(!((new CapitalLetterCheck()).isUpperAndLowerCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the field {field_value} equals  {value}=(!((new Equals()).isEquals((xcb.xpath({field_value})).stringValue(),{value})))
[condition][]the {field} does not contain {CommaSeparatedValues}=((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} has format as {format}=((new SpecialFormat()).formatIs((xcb.xpath({field})).stringValue(),{format}))
[condition][]the {field} is AlphaNumeric with Special Characters=((new DatatypeCheck()).checkAlphaNumericSP((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} is equal to comma seperated values {CommaSeparatedValues}=(!((new Equals()).isEqualToCommaSeperatedValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]atleastOccurenceOfTagPopulated{var0} {var1}=((new Occurence()).atleastOccurenceOfTagPopulated({var0},{var1}))
[condition][]it is not true that the position {pos} of the field {field} is lower case alpha=(!((new DatatypeCheck()).checkPositionLowerCaseAlpha({pos},(xcb.xpath({field})).stringValue())))
[condition][]the {field_date1} is greater than or equal to {field_date2}=((new DateCheck()).isGreaterThanOrEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]the {field} is not equal to values {CommaSeparatedValues}=((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} is Numeric with Special Characters Set {set_of_special_characters}=((new DatatypeCheck()).checkNumericSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]it is not true that the field {field} is not populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field} has all lowercase characters for comma seperated values=(!((new CapitalLetterCheck()).isAllLowerCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]the field {field} is not populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]it is not true that in any {section} the {field1} {field2} then {errorcode} with {errormsg}=(!((new Occurence()).virtuallvlcheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{errorcode},{errormsg})))
[condition][]it is not true that dateCheck1{var0} {var1}=(!((new DateFormatCheck()).dateCheck1({var0},{var1})))
[condition][]the {field} has none valid values {comma_seperated_values}=((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]the length of {field} is {value}=((new LengthCheck()).checkLength((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that the {field} is greater than {value}=(!((new Equals()).isGreaterThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that For an order the CCNA {CCNA} REQTYP{REQTYP} and ACT {ACT} matches database values=(!((new SupplementOrderCheckVZE()).ccnaValueCheck({CCNA},{REQTYP},{ACT})))
[condition][]the {pos} position Of {field} equal to {CommaSeparatedValues}=((new Contains()).positionOfFieldEqualToValues({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that the {field} position {pos} and {pos} is greater than or equal to {pos} and {pos}=(!((new Contains()).checkPositionalValuesGreaterThanOrEqualTo((xcb.xpath({field})).stringValue(),{pos},{pos},{pos},{pos})))
[condition][]the {field_date1} is a valid date=((new DateCheck()).isValidDate((xcb.xpath({field_date1})).stringValue()))
[condition][]the interval between {field_date1} and {field_date2} is less than or equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsLessThanOrEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]the value of any occurance of {field1_with_xpath} equals value of any occurence of {field2_with_xpath}=((new Occurence()).valueofanyoccoffield1equalsvalueofanyoccoffield2((xcb.xpath({field1_with_xpath})).stringValue(),(xcb.xpath({field2_with_xpath})).stringValue()))
[condition][]the position of Special Character is {pos} in {field}=((new DatatypeCheck()).checkPositionSP({pos},(xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {pos} position Of {field} equal to {value} =(!((new Contains()).positionOfFieldEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the {pos} position Of {field1} equal to  {pos}  position Of {field2}=(!((new Contains()).positionOfFieldEqualToPositionOfField({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue())))
[condition][]it is not true that the {field} is AlphaNumeric=(!((new DatatypeCheck()).checkAlphaNumeric((xcb.xpath({field})).stringValue())))
[condition][]any occurence of {field_with_xpath} not equal to values {values} or not populated=((new Occurence()).anyOccurenceNotEqualToValuesornotpopulated((xcb.xpath({field_with_xpath})).stringValue(),{values}))
[condition][]any occurance of the {field_with_xpath} does not exists=((new Occurence()).anyOccurencedoesntExists((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]it is not true that the {field_value} contains virgule which is preceeded and followed by numeric=(!((new Contains()).virguleprecededandfollowedbynumeric((xcb.xpath({field_value})).stringValue())))
[condition][]it is not true that the {field} has all uppercase characters for comma seperated values=(!((new CapitalLetterCheck()).isAllUpperCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]the interval between {field_date1} and {field_date2} is greater than or equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsGreaterThanOrEqualToDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]it is not true that set the activity of this  to {var0}=(!((new ReqTypeAct()).setActivity({var0})))
[condition][]the {pos} position of {field} equals {value}=((new Position()).positionOftagValueEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} contains alphanumeric without {spset}=((new Occurence()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{spset}))
[condition][]the field is {field} is populated=((new Populated()).isPopulated((xcb.xpath({field})).stringValue()))
[condition][]there is no {section} section=((new Populated()).isNotPopulatedSection({section}))
[condition][]the difference between {field_date1} and {field_date2} is less than or equal to one year=((new DateCheck()).isRangeLesserThanOrEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]the {pos} and {pos} position of the {field} is not equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagNotEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]it is not true that the {Date_1} less than first eight chars of {Date_2} in the {CCYYMMDD} format=(!((new DateFormatCheck()).isFieldDateLessThanComparisonDateInspecifiedFormat({Date_1},{Date_2},{CCYYMMDD})))
[condition][]the difference between {field_date1} and {field_date2} is greater than or equal to one year=((new DateCheck()).isRangeGreaterThanOrEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the {pos} position of {field} is in range {start_value} and {end_value}=(!((new Populated()).isPostionOfFieldPopulatedInRange({pos},(xcb.xpath({field})).stringValue(),{start_value},{end_value})))
[condition][]the position {pos1} and {pos2} of {field} is between {start_range} and {end_range}=((new RangeOfValues()).twoFieldPositionInRange({pos1},{pos2},(xcb.xpath({field})).stringValue(),{start_range},{end_range}))
[condition][]it is not true that the {field} contains numeric values followed by lowercase Alpha Characters=(!((new CapitalLetterCheck()).fieldContainsNumericValuesFollowedByLowercaseAlphaCharacters((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is less than {days}=(!((new DateCheck()).intervalBetweenTwoDateIsLessThanDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]it is not true that anyOccurencenoefieldPosEqualstoValue{var0} {var1} {var2}=(!((new Occurence()).anyOccurencenoefieldPosEqualstoValue({var0},{var1},{var2})))
[condition][]the {pos} position of {field} is equal to {comma_seperated_values}=((new Position()).positionOftagValueEqualToValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that the {field} is equal to values {CommaSeparatedValues}=(!((new Equals()).isEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that checkRequestExistsInDatabaseforVZE{var0} {var1} {var2}=(!((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseforVZE({var0},{var1},{var2})))
[condition][]it is not true that the range of the {field} is A0 to Z9=(!((new RangeOfValues()).rangeCheckA0_Z9((xcb.xpath({field})).stringValue())))
[condition][]check Request Exists In Database{PON}{VER} and {CCNA}=((new SupplementOrderCheckVZE()).checkRequestExistsInDatabase({PON},{VER},{CCNA}))
[condition][]it is not true that noOfOccurancesOfLactIOPairMustHaveDiffAliValue{var0} {var1}=(!((new Occurence()).noOfOccurancesOfLactIOPairMustHaveDiffAliValue({var0},{var1})))
[condition][]it is not true that the {pos} and {pos} position of the {field} is greater than or equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsGreaterThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is greater than or equal to one year=(!((new DateCheck()).isRangeGreaterThanOrEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]occnooffieldpopulated{var0} {var1}=((new Occurence()).occnooffieldpopulated({var0},{var1}))
[condition][]the {field_value} contains {value} character which is preceeded and followed by numeric=((new Contains()).virtualeachCharacterPreceededOrFollowedByNumeric((xcb.xpath({field_value})).stringValue(),{value}))
[condition][]the {field} has a invalid value {value}=((new isValidValue()).isNotValidValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} is equal or greater than {value}=((new Equals()).isEqualOrGreaterThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that cancelOrdercheck{PON}{CCNA}=(!((new SupplementOrderCheckVZE()).checkForCancelorder({PON},{CCNA})))
[condition][]the position {pos1} to position {pos2} of {field1_value} is greater than position {pos3} to position {pos4} of {field2_value} plus one=((new Position()).checkrangeoffield1greaterthanrangeoffield2plusone({pos1},{pos2},(xcb.xpath({field1_value})).stringValue(),{pos3},{pos4},(xcb.xpath({field2_value})).stringValue()))
[condition][]it is not true that the {field_with_xpath} is not prohibited=(!((new Prohibited()).isNotProhibited((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]it is not true that the character at the last pos of the {field} equals {values}=(!((new Position()).lastposoffieldequalsvalues((xcb.xpath({field})).stringValue(),{values})))
[condition][]it is not true that anyCharacterExcept{var0} {var1} {var2} {var3} {var4}=(!((new Occurence()).anyCharacterExcept({var0},{var1},{var2},{var3},{var4})))
[condition][]it is not true that the {field} is populated=(!((new Populated()).isPopulated((xcb.xpath({field})).stringValue())))
[condition][]the field {field_value} equals  {value}=((new Equals()).isEquals((xcb.xpath({field_value})).stringValue(),{value}))
[condition][]the {field_date1} is todays date=((new DateCheck()).isToday((xcb.xpath({field_date1})).stringValue()))
[condition][]it is not true that the position of Alpha is {pos} in {field}=(!((new DatatypeCheck()).checkPositionAlpha({pos},(xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field_with_xpath} is not required=(!((new Required()).isNotRequired((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]the {field} is equal or less than {value}=((new Equals()).isEqualOrLessThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]checkSupRequestExistsInDatabaseforVZE{var0} {var1} {var2}=((new SupplementOrderCheckVZE()).checkSupRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue{var0} {var1} {var2} {var3}=((new Occurence()).noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue({var0},{var1},{var2},{var3}))
[condition][]it is not true that the {field} contains alphanumeric without {spset}=(!((new Occurence()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{spset})))
[condition][]the {field} is populated=((new Populated()).isPopulated((xcb.xpath({field})).stringValue()))
[condition][]checkRequestExistsInDatabaseForREQTYP{PON}{CCNA}{REQTYP}=((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseForReqtyp({PON},{CCNA},{REQTYP}))
[condition][]it is not true that the {field} is Numeric with Special Characters Set {set_of_special_characters}=(!((new DatatypeCheck()).checkNumericSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]it is not true that there is no {section} section=(!((new Populated()).isNotPopulatedSection({section})))
[condition][]it is not true that isRequired{var0}=(!((new Required()).isRequired({var0})))
[condition][]it is not true that the {field} is Numeric with Special Characters=(!((new DatatypeCheck()).checkNumericSP((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field} not equals {field}=(!((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field_date1} is less than or equal to {field_date2}=(!((new DateCheck()).isLessThanOrEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]it is not true that the {pos} and {pos} position of the {field} is greater than {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsGreaterThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]the {field} contains numeric characters=((new Contains()).containsNumeric((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} contains {num} of consecutive uppercase Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveUppercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]it is not true that the {field} has all Uppercase characters=(!((new CapitalLetterCheck()).isAllUpperCase((xcb.xpath({field})).stringValue())))
[condition][]the {field_value} contains virgule which is preceeded and followed by numeric=((new Contains()).virguleprecededandfollowedbynumeric((xcb.xpath({field_value})).stringValue()))
[condition][]it is not true that the {field} has none valid values{comma_seperated_values}=(!((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]it is not true that the {field} has time format as {time_format}=(!((new TimeFormatCheck()).timeFormat((xcb.xpath({field})).stringValue(),{time_format})))
[condition][]it is not true that the {field} and {state} has abbreviation value=(!((new ThoroughFareHelperVZE()).fetchAbbreviationName((xcb.xpath({field})).stringValue(),{state})))
[condition][]isValidDate2{var0}=((new DateCheck()).isValidDate2({var0}))
[condition][]it is not true that the {pos} and {pos} position of the {field} is equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]the range of the {field} is A0 to Z9=((new RangeOfValues()).rangeCheckA0_Z9((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the occurance of the {field} is atleast {value}=(!((new Occurence()).atleastOccurenceOf((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is not equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsNotEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]the difference between {field_date1} and {field_date2} is less than one year=((new DateCheck()).isRangeLesserThanOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the {field_date1} is equal to {field_date2}=(!((new DateCheck()).isEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is less than one year=(!((new DateCheck()).isRangeLesserThanOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]the {field} which has a character {character} preceded or followed by a numeric=((new Contains()).characterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{character}))
[condition][]it is not true that the {field} has {count} comma separated values=(!((new CommaSeparatedSpace()).countCommaSeperatedValues((xcb.xpath({field})).stringValue(),{count})))
[condition][]it is not true that the {field} has none valid values {comma_seperated_values}=(!((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]the {field_with_xpath} is not required=((new Required()).isNotRequired((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]the field {field} contains embedded space=((new SpaceCheck()).containsEmbeddedSpace((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} doesnot contain single or combination of the values {CommaSeparatedValues}=(!((new Contains()).fielddoesntcontaincombination((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that the minimum length of {field} is {value}=(!((new LengthCheck()).checkMinimumLength((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that isCurrentDateLessThanOrNotEqualToDesiredDueDate{var0}=(!((new DateCheck()).isCurrentDateLessThanOrNotEqualToDesiredDueDate({var0})))
[condition][]it is not true that the {field} is greater than time {value} in HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSSgreaterthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that field1equalsval1field2notequalsval2{var0} {var1} {var2} {var3} {var4} {var5} {var6} {var7}=(!((new Occurence()).field1equalsval1field2notequalsval2({var0},{var1},{var2},{var3},{var4},{var5},{var6},{var7})))
[condition][]any occurance of the {field_with_xpath} exists=((new Occurence()).anyOccurenceExists((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]the {pos} of {field} has {comma_seperated_values}=((new isValidValue()).positionOfFieldValidValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that all occurance of the {field} is Sequential=(!((new Occurence()).allOccurenceValuesSequential((xcb.xpath({field})).stringValue())))
[condition][]twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition{var0} {var1} {var2} {var3} {var4} {var5}=((new Position()).twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition({var0},{var1},{var2},{var3},{var4},{var5}))
[condition][]it is not true that the {field_date1} is a working day=(!((new DateCheck()).isWorkingDay((xcb.xpath({field_date1})).stringValue())))
[condition][]it is not true that the {field} is greater than time {value}=(!((new TimeFormatCheck()).fieldinformatgreaterthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that any occurance of the {field} is equal to values {coma_separated_values}=(!((new Occurence()).anyOccurenceEqualToValues((xcb.xpath({field})).stringValue(),{coma_separated_values})))
[condition][]it is not true that the {field} not equals {value}=(!((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that display the message {field}=(!((new DisplayMessage()).displayMessage((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field} is AlphaNumeric with only space as special character=(!((new DatatypeCheck()).checkAlphaNumericWithSpaceAsSpecialCharacter((xcb.xpath({field})).stringValue())))
[condition][]the {field} is Numeric without Special Characters Set {set_of_special_characters}=((new DatatypeCheck()).checkNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]the {pos} position Of {field1} equal to  {pos}  position Of {field2}=((new Contains()).positionOfFieldEqualToPositionOfField({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue()))
[condition][]the {field_date1} is a working day=((new DateCheck()).isWorkingDay((xcb.xpath({field_date1})).stringValue()))
[condition][]the {field} is Alpha with Special Characters=((new DatatypeCheck()).checkAlphaSP((xcb.xpath({field})).stringValue()))
[condition][]the {field} is Numeric=((new DatatypeCheck()).checkNumeric((xcb.xpath({field})).stringValue()))
[condition][]the interval between {field_date1} and {field_date2} is less than {days}=((new DateCheck()).intervalBetweenTwoDateIsLessThanDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]it is not true that the range of the {field} is between {start_range} and {end_range}=(!((new RangeOfValues()).rangeCheckNN_NN((xcb.xpath({field})).stringValue(),{start_range},{end_range})))
[condition][]the {field} is equal to values {CommaSeparatedValues}=((new Equals()).isEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]any section {field_with_xpath} of {field} does not exists=((new Occurence()).virtualAnyOccurencedoesnotExistsForSection((xcb.xpath({field_with_xpath})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is greater than {days}=(!((new DateCheck()).intervalBetweenTwoDateIsGreaterThanDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]the {field} is AlphaNumeric=((new DatatypeCheck()).checkAlphaNumeric((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {pos} and {pos} of {field} is equal to {CommaSeparatedValues}=(!((new Position()).twoPositionValueofTagEqualToValues({pos},{pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]it is not true that the range of the {field} is AA to ZZ=(!((new RangeOfValues()).rangeCheckAA_ZZ((xcb.xpath({field})).stringValue())))
[condition][]the {pos} position of {field1} is equal to {pos} position of {field2}=((new Position()).positionOfOneFieldIsEqualToPositionOfAnother({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue()))
[condition][]it is not true that all occurance of the {field} is not Sequential=(!((new Occurence()).allOccurenceValuesnotSequential((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field} is not populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]it is not true that noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue{var0} {var1} {var2} {var3}=(!((new Occurence()).noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue({var0},{var1},{var2},{var3})))
[condition][]the {field} is less than time {value}=((new TimeFormatCheck()).fieldinformatlessthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the position {pos} of the field {field} is lower case alpha=((new DatatypeCheck()).checkPositionLowerCaseAlpha({pos},(xcb.xpath({field})).stringValue()))
[condition][]the {field} has all lowercase characters=((new CapitalLetterCheck()).isAllLowerCase((xcb.xpath({field})).stringValue()))
[condition][]the {pos} and {pos} position of the {field} is lesser than or equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagIsLessThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]checkRequestExistsInDatabaseForAct{PON}{CCNA}{ACT}=((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseForAct({PON},{CCNA},{ACT}))
[condition][]it is not true that any occurance of the {field_with_xpath} does not exists=(!((new Occurence()).anyOccurencedoesntExists((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]it is not true that the length of {field} is {value}=(!((new LengthCheck()).checkLength((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} is Numeric with Special Characters=((new DatatypeCheck()).checkNumericSP((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is equal to one year=(!((new DateCheck()).isRangeEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]the {field} contains {char} followed and preceeded by a numeric=((new Contains()).virtualCharacterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{char}))
[condition][]the {field} contains roman  numerals=((new Contains()).containsRoman((xcb.xpath({field})).stringValue()))
[condition][]the {field} is AlphaNumeric with following Special Character set {set_of_special_characters}=((new DatatypeCheck()).checkAlphaNumericSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]it is not true that the {pos} position Of {field} equal to {CommaSeparatedValues}=(!((new Contains()).positionOfFieldEqualToValues({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that the {pos} position of {field} is not equal to {field}=(!((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is greater than one year=(!((new DateCheck()).isRangeGreaterThanOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]the {field} is Alpha without Special Characters Set {set_of_special_characters}=((new DatatypeCheck()).checkAlphaWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]validvalueisrepeated{var0}=((new Occurence()).validvalueisrepeated({var0}))
[condition][]The {field} is less than time {value1} and greater than time {value2}=((new TimeFormatCheck()).timeRange((xcb.xpath({field})).stringValue(),{value1},{value2}))
[condition][]it is not true that the field {field} contains embedded space=(!((new SpaceCheck()).containsEmbeddedSpace((xcb.xpath({field})).stringValue())))
[condition][]the {field} not equals {field}=((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]the {pos} position of {field} not equals {comma_sep_values}=((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{comma_sep_values}))
[condition][]it is not true that the {field} has both uppercase and lowercase characters=(!((new CapitalLetterCheck()).isUpperAndLowerCase((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {pos} of {field} has {comma_seperated_values}=(!((new isValidValue()).positionOfFieldValidValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]cancelOrdercheck{PON}{CCNA}=((new SupplementOrderCheckVZE()).checkForCancelorder({PON},{CCNA}))
[condition][]it is not true that the {field} contains numeric characters=(!((new Contains()).containsNumeric((xcb.xpath({field})).stringValue())))
[condition][]it is not true that isValidDate2{var0}=(!((new DateCheck()).isValidDate2({var0})))
[condition][]it is not true that the maximum length of {field} is {value}=(!((new LengthCheck()).checkMaximumlength((xcb.xpath({field})).stringValue(),{value})))
[condition][]any occurance of the {field} is equal to value {value}=((new Occurence()).anyOccurenceEqualToValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]dateCheck1{var0} {var1}=((new DateFormatCheck()).dateCheck1({var0},{var1}))
[condition][]it is not true that The {field} is less than time {value1} and greater than time {value2}=(!((new TimeFormatCheck()).timeRange((xcb.xpath({field})).stringValue(),{value1},{value2})))
[condition][]it is not true that noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet{var0} {var1} {var2}=(!((new Occurence()).noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet({var0},{var1},{var2})))
[condition][]the {field_date1} is holiday=((new DateCheck()).isHoliday((xcb.xpath({field_date1})).stringValue()))
[condition][]in any {section} the {field1} equals{value1} and {field2} not equals {value2} then {errorcode} with {errormsg}=((new Occurence()).virtualfield1equalsval1field2notequalsval2({section},(xcb.xpath({field1})).stringValue(),{value1},(xcb.xpath({field2})).stringValue(),{value2},{errorcode},{errormsg}))
[condition][]the position of Alpha is {pos} in {field}=((new DatatypeCheck()).checkPositionAlpha({pos},(xcb.xpath({field})).stringValue()))
[condition][]it is not true that eachCharacterPreceededOrFollowedByNumeric{var0} {var1}=(!((new Contains()).eachCharacterPreceededOrFollowedByNumeric({var0},{var1})))
[condition][]it is not true that the {field} is not equal to values {CommaSeparatedValues}=(!((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that the {field} which has a character {character} preceded or followed by a numeric=(!((new Contains()).characterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{character})))
[condition][]it is not true that check Sup Request Exists In Database for {PON}{VER} and {CCNA}=(!((new SupplementOrderCheckVZE()).checkSupRequestExistsInDatabase({PON},{VER},{CCNA})))
[condition][]the {field} has {count} comma separated values=((new CommaSeparatedSpace()).countCommaSeperatedValues((xcb.xpath({field})).stringValue(),{count}))
[condition][]the {field_date1} is equal to {field_date2}=((new DateCheck()).isEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the {pos} position of {field} is not equal to {comma_seperated_values}=(!((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]the {field} is NotProhibited=((new Prohibited()).isNotProhibited((xcb.xpath({field})).stringValue()))
[condition][]the {field} is greater than time {value} in HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSSgreaterthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that getValue{var0}=(!((new XPathProcessor()).getValue({var0})))
[condition][]the range of the {field} is AA to ZZ=((new RangeOfValues()).rangeCheckAA_ZZ((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the datefield {field1_value} is greater than or equal to the datefield {field2_value} by one year=(!((new DateCheck()).isField1GreaterThanOrEqualToField2ByOneYear((xcb.xpath({field1_value})).stringValue(),(xcb.xpath({field2_value})).stringValue())))
[condition][]the {field_date1} is greater than {field_date2}=((new DateCheck()).isGreaterThan((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that posoffieldequalsspace{var0} {var1}=(!((new SpaceCheck()).posoffieldequalsspace({var0},{var1})))
[condition][]the {field} has both uppercase and lowercase characters=((new CapitalLetterCheck()).isUpperAndLowerCase((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {pos} position of {field} is not equal to {value}=(!((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the {field} contains {num} of consecutive lowercase Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveLowercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]it is not true that isSpecifiedSegmentInValidFormat{var0} {var1} {var2}=(!((new DateFormatCheck()).isSpecifiedSegmentInValidFormat({var0},{var1},{var2})))
[condition][]the {field} contains {num} of consecutive uppercase Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveUppercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]{field} has space as a special character=((new SpaceCheck()).spaceAsSpecialCharacter((xcb.xpath({field})).stringValue()))
[condition][]posoffieldequalsspace{var0} {var1}=((new SpaceCheck()).posoffieldequalsspace({var0},{var1}))
[condition][]noOfOccurancesOfLactIOPairMustHaveDiffAliValue{var0} {var1}=((new Occurence()).noOfOccurancesOfLactIOPairMustHaveDiffAliValue({var0},{var1}))
[condition][]it is not true that the {field} is AlphaNumeric without following Special Character set {set_of_special_characters}=(!((new DatatypeCheck()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]the {field} not equals {value}=((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that the {pos} position Of {field} not equal to {CommaSeparatedValues}=(!((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the length of {field} is between {min} and {max}=((new LengthCheck()).checkMinMaxLength((xcb.xpath({field})).stringValue(),{min},{max}))
[condition][]it is not true that the {field} is Required=(!((new Required()).isRequired((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field_value} contains virgule which is preceeded or followed by numeric=(!((new Contains()).virguleprecededorfollowedbynumeric((xcb.xpath({field_value})).stringValue())))
[condition][]it is not true that the {field_date1} is todays date=(!((new DateCheck()).isToday((xcb.xpath({field_date1})).stringValue())))
[condition][]it is not true that the {field} has valid values {comma_seperated_values}=(!((new isValidValue()).isValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]it is not true that positionOfAnyFieldEqualToCharacter{var0} {var1} {var2}=(!((new Occurence()).positionOfAnyFieldEqualToCharacter({var0},{var1},{var2})))
[condition][]it is not true that isValidDate1{var0}=(!((new DateCheck()).isValidDate1({var0})))
[condition][]it is not true that the {field_with_xpath} is required=(!((new Required()).isRequired((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]the {field} contains all {CommaSeparatedValues}=((new Contains()).containsAll((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field_with_xpath} is required=((new Required()).isRequired((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]the range of the {field} is between {start_range} and {end_range}=((new RangeOfValues()).rangeCheckNN_NN((xcb.xpath({field})).stringValue(),{start_range},{end_range}))
[condition][]anyOccurencenoefieldPosEqualstoValue{var0} {var1} {var2}=((new Occurence()).anyOccurencenoefieldPosEqualstoValue({var0},{var1},{var2}))
[condition][]the {field_date1} is not equal to {field_date2}=((new DateCheck()).isNotEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]check Sup Request Exists In Database for {PON}{VER} and {CCNA}=((new SupplementOrderCheckVZE()).checkSupRequestExistsInDatabase({PON},{VER},{CCNA}))
[condition][]the {field} has {comma_seperated_values}=((new ValidValueCheck()).validCommaSeperatedValue((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]set the request type of this  to {var0}=((new ReqTypeAct()).setRequestType({var0}))
[condition][]the {pos} and {pos} of {field} is equal to {CommaSeparatedValues}=((new Position()).twoPositionValueofTagEqualToValues({pos},{pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that the {field} is less than time {value} in HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSSlessthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]any occurance of the {field} is not equal to value {value}=((new Occurence()).anyOccurenceNotEqualToValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} is Prohibited=((new Prohibited()).isProhibited((xcb.xpath({field})).stringValue()))
[condition][]the {pos} position of {field} is not equal to {comma_seperated_values}=((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that any occurence of {field_with_xpath} not equal to values {values} or not populated=(!((new Occurence()).anyOccurenceNotEqualToValuesornotpopulated((xcb.xpath({field_with_xpath})).stringValue(),{values})))
[condition][]the {field} has telephone number format as {tn_format}=((new TNFormat()).tnFormatIs((xcb.xpath({field})).stringValue(),{tn_format}))
[condition][]it is not true that the value of any occurance of {field1_with_xpath} equals value of any occurence of {field2_with_xpath}=(!((new Occurence()).valueofanyoccoffield1equalsvalueofanyoccoffield2((xcb.xpath({field1_with_xpath})).stringValue(),(xcb.xpath({field2_with_xpath})).stringValue())))
[condition][]display the message {field}=((new DisplayMessage()).displayMessage((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the position {pos1} to position {pos2} of {field1_value} is greater than position {pos3} to position {pos4} of {field2_value} plus one=(!((new Position()).checkrangeoffield1greaterthanrangeoffield2plusone({pos1},{pos2},(xcb.xpath({field1_value})).stringValue(),{pos3},{pos4},(xcb.xpath({field2_value})).stringValue())))
[condition][]it is not true that the {pos} position of {field} in between {start_range} and {end_range}=(!((new RangeOfValues()).fieldPositionInRange({pos},(xcb.xpath({field})).stringValue(),{start_range},{end_range})))
[condition][]it is not true that the {field_date1} is less than {field_date2}=(!((new DateCheck()).isLessThan((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]it is not true that the {field} is Prohibited=(!((new Prohibited()).isProhibited((xcb.xpath({field})).stringValue())))
[condition][]the {field} is not populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]it is not true that validvalueisrepeated{var0}=(!((new Occurence()).validvalueisrepeated({var0})))
[condition][]it is not true that checkRequestExistsInDatabaseForAct{PON}{CCNA}{ACT}=(!((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseForAct({PON},{CCNA},{ACT})))
[condition][]it is not true that the {field_value} not equal  {value}=(!((new Equals()).isNotEquals((xcb.xpath({field_value})).stringValue(),{value})))
[condition][]the {field} has all lowercase characters for comma seperated values=((new CapitalLetterCheck()).isAllLowerCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]the {pos} position of {field} is not equal to {field}=((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]it is not true that checkRequestExistsInDatabaseForREQTYP{PON}{CCNA}{REQTYP}=(!((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseForReqtyp({PON},{CCNA},{REQTYP})))
[condition][]the {Date_1} less than first eight chars of {Date_2} in the {CCYYMMDD} format=((new DateFormatCheck()).isFieldDateLessThanComparisonDateInspecifiedFormat({Date_1},{Date_2},{CCYYMMDD}))
[condition][]it is not true that checkSupRequestExistsInDatabaseforVZE{var0} {var1} {var2}=(!((new SupplementOrderCheckVZE()).checkSupRequestExistsInDatabaseforVZE({var0},{var1},{var2})))
[condition][]it is not true that the {field} contains roman  numerals=(!((new Contains()).containsRoman((xcb.xpath({field})).stringValue())))
[condition][]the {field} has all Uppercase characters=((new CapitalLetterCheck()).isAllUpperCase((xcb.xpath({field})).stringValue()))
[condition][]it is not true that this  isUnique{var0}=(!((new Unique()).isUnique({var0})))
[condition][]it is not true that the length of {field} is between {min} and {max}=(!((new LengthCheck()).checkMinMaxLength((xcb.xpath({field})).stringValue(),{min},{max})))
[condition][]it is not true that the {field} only the first word is populated with the {values} with absent additional data=(!((new Contains()).containscommasepvaluesfollbyword((xcb.xpath({field})).stringValue(),{values})))
[condition][]isSpecifiedSegmentInValidFormat{var0} {var1} {var2}=((new DateFormatCheck()).isSpecifiedSegmentInValidFormat({var0},{var1},{var2}))
[condition][]the {field} is Prohibited for {comma_seperated_values}=((new Prohibited()).prohibitedForValues((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that in any {section} the {field1} equals{value1} and {field2} not equals {value2} then {errorcode} with {errormsg}=(!((new Occurence()).virtualfield1equalsval1field2notequalsval2({section},(xcb.xpath({field1})).stringValue(),{value1},(xcb.xpath({field2})).stringValue(),{value2},{errorcode},{errormsg})))
[condition][]the {field} has none valid values{comma_seperated_values}=((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]the {field} is Required for {comma_seperated_values}=((new Required()).requiredForValues((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that the {field} has comma seperated values=(!((new CommaSeparatedSpace()).checkCommaSeparatedSpace((xcb.xpath({field})).stringValue())))
[condition][]any occurance of the {field} is not equal to values {coma_separated_values}=((new Occurence()).anyOccurenceNotEqualToValues((xcb.xpath({field})).stringValue(),{coma_separated_values}))
[condition][]the {field} contains only firstword populated with no additional data=((new Contains()).conatinsonlyfirstword((xcb.xpath({field})).stringValue()))
[condition][]this  isUnique{var0}=((new Unique()).isUnique({var0}))
[condition][]the minimum length of {field} is {value}=((new LengthCheck()).checkMinimumLength((xcb.xpath({field})).stringValue(),{value}))
[condition][]checkForOrderCompletion{PON}{VER} AND {CCNA}=((new SupplementOrderCheckVZE()).checkordercompletion({PON},{VER},{CCNA}))
[condition][]it is not true that the {field} contains {num} of consecutive spaces after Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveSpacesAfterAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]it is not true that the {field} contains only firstword populated with no additional data=(!((new Contains()).conatinsonlyfirstword((xcb.xpath({field})).stringValue())))
[condition][]the {pos} of {field} has {value}=((new isValidValue()).positionOfFieldValidValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} has only one {char} special character present=((new DatatypeCheck()).checkRepeationOFSpecialCharacter((xcb.xpath({field})).stringValue(),{char}))
[condition][]it is not true that isRangeGreaterThanSpecifiedMonths{var0} {var1} {var2}=(!((new DateCheck()).isRangeGreaterThanSpecifiedMonths({var0},{var1},{var2})))
[condition][]the {pos} position of {field} is not equal to {value}=((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that the {field} equals {value}=(!((new Equals()).isEquals((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {pos} position of {field} in between {start_range} and {end_range}=((new RangeOfValues()).fieldPositionInRange({pos},(xcb.xpath({field})).stringValue(),{start_range},{end_range}))
[condition][]the character at the last pos of the {field} equals {values}=((new Position()).lastposoffieldequalsvalues((xcb.xpath({field})).stringValue(),{values}))
[condition][]it is not true that noOfOccurenceGreaterThan{var0} {var1}=(!((new Occurence()).noOfOccurenceGreaterThan({var0},{var1})))
[condition][]it is not true that number of occurance of the {field} is equal to value {value}=(!((new Occurence()).noOfOccurenceEqualTo((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} has both uppercase and lowercase characters for commaseperated vaules=((new CapitalLetterCheck()).isUpperAndLowerCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} has a valid value {value}=(!((new isValidValue()).isValidValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]all occurance of the {field} is Sequential=((new Occurence()).allOccurenceValuesSequential((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} has date format as {format}=(!((new DateFormatCheck()).dateCheck((xcb.xpath({field})).stringValue(),{format})))
[condition][]it is not true that lastCharacterOfField{var0} {var1}=(!((new Equals()).lastCharacterOfField({var0},{var1})))
[condition][]it is not true that noOfOccurenceLessThan{var0} {var1}=(!((new Occurence()).noOfOccurenceLessThan({var0},{var1})))
[condition][]the {field_value} not equal  {value}=((new Equals()).isNotEquals((xcb.xpath({field_value})).stringValue(),{value}))
[condition][]noOfOccurenceLessThan{var0} {var1}=((new Occurence()).noOfOccurenceLessThan({var0},{var1}))
[condition][]the {pos} position Of {field} equal to {value} =((new Contains()).positionOfFieldEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]the {pos} position Of {field} not equal to {CommaSeparatedValues}=((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the last character Of {field} is {value}=((new Equals()).virtualLastCharacterOfField((xcb.xpath({field})).stringValue(),{value}))
[condition][]the field {field} contains a space between position {pos1} and position {pos2}=((new SpaceCheck()).existenceOfSpaceInSpecRange((xcb.xpath({field})).stringValue(),{pos1},{pos2}))
[condition][]isValidDate1{var0}=((new DateCheck()).isValidDate1({var0}))
[condition][]the {field} contains {num} of consecutive lowercase Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveLowercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]it is not true that the {pos} position of {field1} is equal to {pos} position of {field2}=(!((new Position()).positionOfOneFieldIsEqualToPositionOfAnother({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue())))
[condition][]the {field} has valid values {comma_seperated_values}=((new isValidValue()).isValidValues((xcb.xpath({field})).stringValue(),{comma_seperated_values}))
[condition][]it is not true that the {field} has time format as HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSS((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field} is Required for {comma_seperated_values}=(!((new Required()).requiredForValues((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]it is not true that set the request type of this  to {var0}=(!((new ReqTypeAct()).setRequestType({var0})))
[condition][]the {field} has comma seperated values=((new CommaSeparatedSpace()).checkCommaSeparatedSpace((xcb.xpath({field})).stringValue()))
[condition][]For an order the CCNA {CCNA} REQTYP{REQTYP} and ACT {ACT} matches database values=((new SupplementOrderCheckVZE()).ccnaValueCheck({CCNA},{REQTYP},{ACT}))
[condition][]the {field} has a valid value {value}=((new isValidValue()).isValidValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that any section {field_with_xpath} of {field} does not exists=(!((new Occurence()).virtualAnyOccurencedoesnotExistsForSection((xcb.xpath({field_with_xpath})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field_value} contains {value} character which is preceeded and followed by numeric=(!((new Contains()).virtualeachCharacterPreceededOrFollowedByNumeric((xcb.xpath({field_value})).stringValue(),{value})))
[condition][]it is not true that the {pos} position of {field} equals {value}=(!((new Position()).positionOftagValueEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the {field} has format NNNNNNA=(!((new SpecialFormat()).formatisNNNNNNA((xcb.xpath({field})).stringValue())))
[condition][]the {field} and {state} has abbreviation value=((new ThoroughFareHelperVZE()).fetchAbbreviationName((xcb.xpath({field})).stringValue(),{state}))
[condition][]it is not true that the {field_with_xpath} is prohibited=(!((new Prohibited()).isProhibited((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]checkRequestExistsInDatabaseforVZE{var0} {var1} {var2}=((new SupplementOrderCheckVZE()).checkRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]the {field} position {pos} and {pos} is greater than or equal to {pos} and {pos}=((new Contains()).checkPositionalValuesGreaterThanOrEqualTo((xcb.xpath({field})).stringValue(),{pos},{pos},{pos},{pos}))
[condition][]it is not true that the {field} is not Required=(!((new Required()).isNotRequired((xcb.xpath({field})).stringValue())))
[condition][]in any {section} the {field1} {field2} then {errorcode} with {errormsg}=((new Occurence()).virtuallvlcheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{errorcode},{errormsg}))
[condition][]it is not true that the value of any occurance of {field1_with_xpzth} not equals value of any occurence of {field2_with_xpath}=(!((new Occurence()).valueofanyoccoffield1notequalsvalueofanyoccoffield2((xcb.xpath({field1_with_xpzth})).stringValue(),(xcb.xpath({field2_with_xpath})).stringValue())))
[condition][]it is not true that any occurance of the {field} is not equal to value {value}=(!((new Occurence()).anyOccurenceNotEqualToValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that the {field} is Numeric without Special Characters Set {set_of_special_characters}=(!((new DatatypeCheck()).checkNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]the {field} is equal to comma seperated values {CommaSeparatedValues}=((new Equals()).isEqualToCommaSeperatedValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} is less than {value}=((new Equals()).isLessThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that the {field} has all lowercase characters=(!((new CapitalLetterCheck()).isAllLowerCase((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is less than or equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsLessThanOrEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]it is not true that the {field} is equal or greater than {value}=(!((new Equals()).isEqualOrGreaterThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]the difference between {field_date1} and {field_date2} is not equal to one year=((new DateCheck()).isRangeNotEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the {field_date1} is greater than or equal to {field_date2}=(!((new DateCheck()).isGreaterThanOrEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]the {pos} position of {field} is in range {start_value} and {end_value}=((new Populated()).isPostionOfFieldPopulatedInRange({pos},(xcb.xpath({field})).stringValue(),{start_value},{end_value}))
[condition][]number of occurance of the {field} is equal to value {value}=((new Occurence()).noOfOccurenceEqualTo((xcb.xpath({field})).stringValue(),{value}))
[condition][]isCurrentDateLessThanOrNotEqualToDesiredDueDate{var0}=((new DateCheck()).isCurrentDateLessThanOrNotEqualToDesiredDueDate({var0}))
[condition][]the {field} is less than time {value} in HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSSlessthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} equals {value}=((new Equals()).isEquals((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field_value} contains virgule which is preceeded or followed by numeric=((new Contains()).virguleprecededorfollowedbynumeric((xcb.xpath({field_value})).stringValue()))
[condition][]it is not true that all occurence of the {field} not equal to value {value}=(!((new Occurence()).allOccurenceOfFieldNotEqualToValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]all occurance of the {field} is not Sequential=((new Occurence()).allOccurenceValuesnotSequential((xcb.xpath({field})).stringValue()))
[condition][]the {field} is Alpha with Special Characters Set {set_of_special_characters}=((new DatatypeCheck()).checkAlphaSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]it is not true that the {pos} and {pos} position of the {field} is not equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagNotEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]the {field} contains numeric values followed by lowercase Alpha Characters=((new CapitalLetterCheck()).fieldContainsNumericValuesFollowedByLowercaseAlphaCharacters((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} is Alpha with Special Characters Set {set_of_special_characters}=(!((new DatatypeCheck()).checkAlphaSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]it is not true that the {pos} position of {field} not equals {comma_sep_values}=(!((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{comma_sep_values})))
[condition][]it is not true that the section {field} is not populated=(!((new Populated()).isSectionNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]the {field} has date format as {format}=((new DateFormatCheck()).dateCheck((xcb.xpath({field})).stringValue(),{format}))
[condition][]lastCharacterOfField{var0} {var1}=((new Equals()).lastCharacterOfField({var0},{var1}))
[condition][]isRangeGreaterThanSpecifiedMonths{var0} {var1} {var2}=((new DateCheck()).isRangeGreaterThanSpecifiedMonths({var0},{var1},{var2}))
[condition][]it is not true that tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField{var0} {var1}=(!((new Occurence()).tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField({var0},{var1})))
[condition][]the {field} is Required=((new Required()).isRequired((xcb.xpath({field})).stringValue()))
[condition][]the {field} is greater than {value}=((new Equals()).isGreaterThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that the {field} contains {char} followed and preceeded by a numeric=(!((new Contains()).virtualCharacterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{char})))
[condition][]the {field_with_xpath} is prohibited=((new Prohibited()).isProhibited((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]it is not true that the {pos} and {pos} position of the {field} is lesser than {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsLessThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that the {pos} position of {field} is equal to {comma_seperated_values}=(!((new Position()).positionOftagValueEqualToValues({pos},(xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]the {field_with_xpath} is not prohibited=((new Prohibited()).isNotProhibited((xcb.xpath({field_with_xpath})).stringValue()))
[condition][]it is not true that the {field} is Alpha=(!((new DatatypeCheck()).checkAlpha((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the field {field} contains a space between position {pos1} and position {pos2}=(!((new SpaceCheck()).existenceOfSpaceInSpecRange((xcb.xpath({field})).stringValue(),{pos1},{pos2})))
[condition][]anyCharacterExcept{var0} {var1} {var2} {var3} {var4}=((new Occurence()).anyCharacterExcept({var0},{var1},{var2},{var3},{var4}))
[condition][]isRequired{var0}=((new Required()).isRequired({var0}))
[condition][]it is not true that the {field} contains {CommaSeparatedValues}=(!((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the occurance of the {field} is atleast {value}=((new Occurence()).atleastOccurenceOf((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that getvalue{var0}=(!((new Occurence()).getvalue({var0})))
[condition][]it is not true that the {field} is Alpha without Special Characters Set {set_of_special_characters}=(!((new DatatypeCheck()).checkAlphaWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]the {pos} and {pos} position of the {field} is greater than or equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagIsGreaterThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]the {field} is AlphaNumeric with only space as special character=((new DatatypeCheck()).checkAlphaNumericWithSpaceAsSpecialCharacter((xcb.xpath({field})).stringValue()))
[condition][]all occurence of the {field} not equal to value {value}=((new Occurence()).allOccurenceOfFieldNotEqualToValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that {field} has space as a special character=(!((new SpaceCheck()).spaceAsSpecialCharacter((xcb.xpath({field})).stringValue())))
[condition][]set the activity of this  to {var0}=((new ReqTypeAct()).setActivity({var0}))
[condition][]the datefield {field1_value} is greater than or equal to the datefield {field2_value} by one year=((new DateCheck()).isField1GreaterThanOrEqualToField2ByOneYear((xcb.xpath({field1_value})).stringValue(),(xcb.xpath({field2_value})).stringValue()))
[condition][]the {field} is Alpha=((new DatatypeCheck()).checkAlpha((xcb.xpath({field})).stringValue()))
[condition][]the interval between {field_date1} and {field_date2} is not equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsNotEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]the {field} has format NNNNNNA=((new SpecialFormat()).formatisNNNNNNA((xcb.xpath({field})).stringValue()))
[condition][]it is not true that any occurance of the {field} is equal to value {value}=(!((new Occurence()).anyOccurenceEqualToValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that occnooffieldpopulated{var0} {var1}=(!((new Occurence()).occnooffieldpopulated({var0},{var1})))
[condition][]it is not true that this  fetchAbbreviationName{var0}=(!((new ThoroughFareHelperVZW()).fetchAbbreviationName({var0})))
[condition][]it is not true that any occurance of the {field_with_xpath} exists=(!((new Occurence()).anyOccurenceExists((xcb.xpath({field_with_xpath})).stringValue())))
[condition][]the {pos} and {pos} position of the {field} is equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]it is not true that the occurance of the {field} is atmost {value}=(!((new Occurence()).atmostOccurenceOf((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that compareCharAtAnyPositionWithAnyValue{var0} {var1} {var2} {var3} {var4}=(!((new Position()).compareCharAtAnyPositionWithAnyValue({var0},{var1},{var2},{var3},{var4})))
[condition][]the {field} is AlphaNumeric without following Special Character set {set_of_special_characters}=((new DatatypeCheck()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters}))
[condition][]it is not true that checkForOrderCompletion{PON}{VER} AND {CCNA}=(!((new SupplementOrderCheckVZE()).checkordercompletion({PON},{VER},{CCNA})))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is less than or equal to one year=(!((new DateCheck()).isRangeLesserThanOrEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]it is not true that the {field} is Alpha with Special Characters=(!((new DatatypeCheck()).checkAlphaSP((xcb.xpath({field})).stringValue())))
[condition][]it is not true that isCurrentDateLessThanOrEqualToDesiredDueDate{var0}=(!((new DateCheck()).isCurrentDateLessThanOrEqualToDesiredDueDate({var0})))
[condition][]it is not true that the {field} contains {num} of spaces before Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveSpacesBeforeAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]it is not true that the position of Numeric is {pos} in {field}=(!((new DatatypeCheck()).checkPositionNumeric({pos},(xcb.xpath({field})).stringValue())))
[condition][]the {pos} and {pos} position of the {field} is greater than {pos} and {pos} position=((new Position()).twoPositionValueofTagIsGreaterThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]it is not true that the {field_date1} is greater than {field_date2}=(!((new DateCheck()).isGreaterThan((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]the section {field} is not populated=((new Populated()).isSectionNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} has {comma_seperated_values}=(!((new ValidValueCheck()).validCommaSeperatedValue((xcb.xpath({field})).stringValue(),{comma_seperated_values})))
[condition][]getValue{var0}=((new XPathProcessor()).getValue({var0}))
[condition][]the {field} has all uppercase characters for comma seperated values=((new CapitalLetterCheck()).isAllUpperCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the difference between {field_date1} and {field_date2} is not equal to one year=(!((new DateCheck()).isRangeNotEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]it is not true that twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition{var0} {var1} {var2} {var3} {var4} {var5}=(!((new Position()).twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition({var0},{var1},{var2},{var3},{var4},{var5})))
[condition][]it is not true that the {pos} of {field} has {value}=(!((new isValidValue()).positionOfFieldValidValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field_date1} is less than or equal to {field_date2}=((new DateCheck()).isLessThanOrEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the position {pos1} and {pos2} of {field} is between {start_range} and {end_range}=(!((new RangeOfValues()).twoFieldPositionInRange({pos1},{pos2},(xcb.xpath({field})).stringValue(),{start_range},{end_range})))
[condition][]the interval between {field_date1} and {field_date2} is greater than {days}=((new DateCheck()).intervalBetweenTwoDateIsGreaterThanDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]it is not true that atleastOccurenceOfTagPopulated{var0} {var1}=(!((new Occurence()).atleastOccurenceOfTagPopulated({var0},{var1})))
[condition][]it is not true that the {field} does not contain {CommaSeparatedValues}=(!((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that the {field} is AlphaNumeric with Special Characters=(!((new DatatypeCheck()).checkAlphaNumericSP((xcb.xpath({field})).stringValue())))
[condition][]it is not true that the {field_date1} is holiday=(!((new DateCheck()).isHoliday((xcb.xpath({field_date1})).stringValue())))
[condition][]it is not true that the position of Special Character is {pos} in {field}=(!((new DatatypeCheck()).checkPositionSP({pos},(xcb.xpath({field})).stringValue())))
[condition][]the {field} is not Required=((new Required()).isNotRequired((xcb.xpath({field})).stringValue()))
[condition][]the {field} is greater than time {value}=((new TimeFormatCheck()).fieldinformatgreaterthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the difference between {field_date1} and {field_date2} is greater than one year=((new DateCheck()).isRangeGreaterThanOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]any occurance of the {field} is equal to values {coma_separated_values}=((new Occurence()).anyOccurenceEqualToValues((xcb.xpath({field})).stringValue(),{coma_separated_values}))
[condition][]it is not true that the {field_date1} is a valid date=(!((new DateCheck()).isValidDate((xcb.xpath({field_date1})).stringValue())))
[condition][]the value of any occurance of {field1_with_xpzth} not equals value of any occurence of {field2_with_xpath}=((new Occurence()).valueofanyoccoffield1notequalsvalueofanyoccoffield2((xcb.xpath({field1_with_xpzth})).stringValue(),(xcb.xpath({field2_with_xpath})).stringValue()))
[condition][]it is not true that the {field} is NotProhibited=(!((new Prohibited()).isNotProhibited((xcb.xpath({field})).stringValue())))
[condition][]the difference between {field_date1} and {field_date2} is equal to one year=((new DateCheck()).isRangeEqualToOneYear((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]it is not true that the interval between {field_date1} and {field_date2} is greater than or equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsGreaterThanOrEqualToDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days})))
[condition][]it is not true that the {field} is AlphaNumeric with following Special Character set {set_of_special_characters}=(!((new DatatypeCheck()).checkAlphaNumericSPSet((xcb.xpath({field})).stringValue(),{set_of_special_characters})))
[condition][]it is not true that the {field} contains all {CommaSeparatedValues}=(!((new Contains()).containsAll((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the {field1} is greater1 than values {field2}=((new Equals()).field1IsGreaterThanField2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue()))
[condition][]the {field} contains {num} of consecutive spaces after Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveSpacesAfterAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]it is not true that the {pos} and {pos} position of the {field} is lesser than or equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsLessThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that the {field_date1} is not equal to {field_date2}=(!((new DateCheck()).isNotEqualTo((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue())))
[condition][]eachCharacterPreceededOrFollowedByNumeric{var0} {var1}=((new Contains()).eachCharacterPreceededOrFollowedByNumeric({var0},{var1}))
[condition][]the value of the field {field1} is not equal to any occurance of the value of the field {field2}=((new Occurence()).valueoffield1IsNotEqualsvalueofaoccoffield2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue()))
[condition][]the {field} only the first word is populated with the {values} with absent additional data=((new Contains()).containscommasepvaluesfollbyword((xcb.xpath({field})).stringValue(),{values}))
[condition][]compareCharAtAnyPositionWithAnyValue{var0} {var1} {var2} {var3} {var4}=((new Position()).compareCharAtAnyPositionWithAnyValue({var0},{var1},{var2},{var3},{var4}))
[condition][]the interval between {field_date1} and {field_date2} is equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsEqualtoDays((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue(),{days}))
[condition][]it is not true that anyOccurenceOf{var0}=(!((new Occurence()).anyOccurenceOf({var0})))
[condition][]the {field_date1} is less than {field_date2}=((new DateCheck()).isLessThan((xcb.xpath({field_date1})).stringValue(),(xcb.xpath({field_date2})).stringValue()))
[condition][]the {field} contains {CommaSeparatedValues}=((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]noOfOccurenceGreaterThan{var0} {var1}=((new Occurence()).noOfOccurenceGreaterThan({var0},{var1}))
[condition][]it is not true that the {field} has only one {char} special character present=(!((new DatatypeCheck()).checkRepeationOFSpecialCharacter((xcb.xpath({field})).stringValue(),{char})))
[condition][]it is not true that the field is {field} is populated=(!((new Populated()).isPopulated((xcb.xpath({field})).stringValue())))
[condition][]getvalue{var0}=((new Occurence()).getvalue({var0}))
[condition][]it is not true that the {field1} is greater1 than values {field2}=(!((new Equals()).field1IsGreaterThanField2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue())))
[condition][]it is not true that the {field} has telephone number format as {tn_format}=(!((new TNFormat()).tnFormatIs((xcb.xpath({field})).stringValue(),{tn_format})))
[condition][]tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField{var0} {var1}=((new Occurence()).tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField({var0},{var1}))
[condition][]it is not true that the field  is {field} not populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]field1equalsval1field2notequalsval2{var0} {var1} {var2} {var3} {var4} {var5} {var6} {var7}=((new Occurence()).field1equalsval1field2notequalsval2({var0},{var1},{var2},{var3},{var4},{var5},{var6},{var7}))
[condition][]it is not true that check Request Exists In Database{PON}{VER} and {CCNA}=(!((new SupplementOrderCheckVZE()).checkRequestExistsInDatabase({PON},{VER},{CCNA})))
[condition][]the {field} has time format as {time_format}=((new TimeFormatCheck()).timeFormat((xcb.xpath({field})).stringValue(),{time_format}))
[condition][]it is not true that the value of the field {field1} is not equal to any occurance of the value of the field {field2}=(!((new Occurence()).valueoffield1IsNotEqualsvalueofaoccoffield2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue())))
[condition][]it is not true that anyCharacterOfFieldIs{var0} {var1}=(!((new Occurence()).anyCharacterOfFieldIs({var0},{var1})))
[condition][]anyCharacterOfFieldIs{var0} {var1}=((new Occurence()).anyCharacterOfFieldIs({var0},{var1}))
[condition][]anyOccurenceOf{var0}=((new Occurence()).anyOccurenceOf({var0}))
[condition][]the field  is {field} not populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]the occurance of the {field} is atmost {value}=((new Occurence()).atmostOccurenceOf((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} has time format as HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSS((xcb.xpath({field})).stringValue()))
[condition][]it is not true that the {field} is equal or less than {value}=(!((new Equals()).isEqualOrLessThan((xcb.xpath({field})).stringValue(),{value})))
[consequence][]the error code {field1} the error message {field2} for the field {field3}=xcb.logError({field1},{field2},{field3})
[condition][]xcb object=xcb : XOMContainerBean()
[condition][]Evaluate=eval
[condition][]Start Brace=(
[condition][]End Brace=)
[condition][]AND=&&
[condition][]OR=||
